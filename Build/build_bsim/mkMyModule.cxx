/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Sun Oct 16 15:54:29 BST 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkMyModule.h"


/* Constructor */
MOD_mkMyModule::MOD_mkMyModule(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_a(simHdl, "a", this, 8u, (tUInt8)77u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 8u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_inc_counter = false;
  PORT_inc_counter_x = 0u;
  PORT_get_a = 0u;
  PORT_RDY_get_a = false;
  PORT_inc_counter = 0u;
  PORT_RDY_inc_counter = false;
  symbol_count = 11u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMyModule::init_symbols_0()
{
  init_symbol(&symbols[0u], "a", SYM_MODULE, &INST_a);
  init_symbol(&symbols[1u], "CAN_FIRE_get_a", SYM_DEF, &DEF_CAN_FIRE_get_a, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_inc_counter", SYM_DEF, &DEF_CAN_FIRE_inc_counter, 1u);
  init_symbol(&symbols[3u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[4u], "EN_inc_counter", SYM_PORT, &PORT_EN_inc_counter, 1u);
  init_symbol(&symbols[5u], "get_a", SYM_PORT, &PORT_get_a, 8u);
  init_symbol(&symbols[6u], "inc_counter", SYM_PORT, &PORT_inc_counter, 8u);
  init_symbol(&symbols[7u], "inc_counter_x", SYM_PORT, &PORT_inc_counter_x, 8u);
  init_symbol(&symbols[8u], "RDY_get_a", SYM_PORT, &PORT_RDY_get_a, 1u);
  init_symbol(&symbols[9u], "RDY_inc_counter", SYM_PORT, &PORT_RDY_inc_counter, 1u);
  init_symbol(&symbols[10u], "WILL_FIRE_inc_counter", SYM_DEF, &DEF_WILL_FIRE_inc_counter, 1u);
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkMyModule::METH_get_a()
{
  PORT_get_a = INST_a.METH_read();
  return PORT_get_a;
}

tUInt8 MOD_mkMyModule::METH_RDY_get_a()
{
  DEF_CAN_FIRE_get_a = (tUInt8)1u;
  PORT_RDY_get_a = DEF_CAN_FIRE_get_a;
  return PORT_RDY_get_a;
}

tUInt8 MOD_mkMyModule::METH_inc_counter(tUInt8 ARG_inc_counter_x)
{
  tUInt8 DEF_x__h113;
  tUInt8 DEF__read__h80;
  PORT_EN_inc_counter = (tUInt8)1u;
  DEF_WILL_FIRE_inc_counter = (tUInt8)1u;
  PORT_inc_counter_x = ARG_inc_counter_x;
  DEF__read__h80 = INST_counter.METH_read();
  PORT_inc_counter = DEF__read__h80;
  DEF_x__h113 = (tUInt8)255u & (DEF__read__h80 + ARG_inc_counter_x);
  INST_counter.METH_write(DEF_x__h113);
  return PORT_inc_counter;
}

tUInt8 MOD_mkMyModule::METH_RDY_inc_counter()
{
  DEF_CAN_FIRE_inc_counter = (tUInt8)1u;
  PORT_RDY_inc_counter = DEF_CAN_FIRE_inc_counter;
  return PORT_RDY_inc_counter;
}


/* Reset routines */

void MOD_mkMyModule::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_counter.reset_RST(ARG_rst_in);
  INST_a.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMyModule::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMyModule::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_a.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMyModule::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 12u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_get_a", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_inc_counter", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_inc_counter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_inc_counter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_get_a", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_inc_counter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "get_a", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inc_counter", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inc_counter_x", 8u);
  num = INST_a.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMyModule::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMyModule &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMyModule::vcd_defs(tVCDDumpType dt, MOD_mkMyModule &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_get_a) != DEF_CAN_FIRE_get_a)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_get_a, 1u);
	backing.DEF_CAN_FIRE_get_a = DEF_CAN_FIRE_get_a;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_inc_counter) != DEF_CAN_FIRE_inc_counter)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_inc_counter, 1u);
	backing.DEF_CAN_FIRE_inc_counter = DEF_CAN_FIRE_inc_counter;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_inc_counter) != DEF_WILL_FIRE_inc_counter)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_inc_counter, 1u);
	backing.DEF_WILL_FIRE_inc_counter = DEF_WILL_FIRE_inc_counter;
      }
      ++num;
      if ((backing.PORT_EN_inc_counter) != PORT_EN_inc_counter)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_inc_counter, 1u);
	backing.PORT_EN_inc_counter = PORT_EN_inc_counter;
      }
      ++num;
      if ((backing.PORT_RDY_get_a) != PORT_RDY_get_a)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_get_a, 1u);
	backing.PORT_RDY_get_a = PORT_RDY_get_a;
      }
      ++num;
      if ((backing.PORT_RDY_inc_counter) != PORT_RDY_inc_counter)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_inc_counter, 1u);
	backing.PORT_RDY_inc_counter = PORT_RDY_inc_counter;
      }
      ++num;
      if ((backing.PORT_get_a) != PORT_get_a)
      {
	vcd_write_val(sim_hdl, num, PORT_get_a, 8u);
	backing.PORT_get_a = PORT_get_a;
      }
      ++num;
      if ((backing.PORT_inc_counter) != PORT_inc_counter)
      {
	vcd_write_val(sim_hdl, num, PORT_inc_counter, 8u);
	backing.PORT_inc_counter = PORT_inc_counter;
      }
      ++num;
      if ((backing.PORT_inc_counter_x) != PORT_inc_counter_x)
      {
	vcd_write_val(sim_hdl, num, PORT_inc_counter_x, 8u);
	backing.PORT_inc_counter_x = PORT_inc_counter_x;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_get_a, 1u);
      backing.DEF_CAN_FIRE_get_a = DEF_CAN_FIRE_get_a;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_inc_counter, 1u);
      backing.DEF_CAN_FIRE_inc_counter = DEF_CAN_FIRE_inc_counter;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_inc_counter, 1u);
      backing.DEF_WILL_FIRE_inc_counter = DEF_WILL_FIRE_inc_counter;
      vcd_write_val(sim_hdl, num++, PORT_EN_inc_counter, 1u);
      backing.PORT_EN_inc_counter = PORT_EN_inc_counter;
      vcd_write_val(sim_hdl, num++, PORT_RDY_get_a, 1u);
      backing.PORT_RDY_get_a = PORT_RDY_get_a;
      vcd_write_val(sim_hdl, num++, PORT_RDY_inc_counter, 1u);
      backing.PORT_RDY_inc_counter = PORT_RDY_inc_counter;
      vcd_write_val(sim_hdl, num++, PORT_get_a, 8u);
      backing.PORT_get_a = PORT_get_a;
      vcd_write_val(sim_hdl, num++, PORT_inc_counter, 8u);
      backing.PORT_inc_counter = PORT_inc_counter;
      vcd_write_val(sim_hdl, num++, PORT_inc_counter_x, 8u);
      backing.PORT_inc_counter_x = PORT_inc_counter_x;
    }
}

void MOD_mkMyModule::vcd_prims(tVCDDumpType dt, MOD_mkMyModule &backing)
{
  INST_a.dump_VCD(dt, backing.INST_a);
  INST_counter.dump_VCD(dt, backing.INST_counter);
}
